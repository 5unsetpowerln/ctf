#!/usr/bin/env python
import sys
import ptrlib as ptr
import pwn

exe = ptr.ELF("./prob_patched")
pwn.context.binary = pwn.ELF(exe.filepath)
libc = ptr.ELF("./libc.so.6")
ld = ptr.ELF("./ld-linux-x86-64.so.2")


def connect():
    if len(sys.argv) > 1 and sys.argv[1] == "remote":
        return pwn.remote("localhost", 5000)
    else:
        return pwn.process(exe.filepath)


def unwrap(x):
    if x is None:
        ptr.logger.error("Failed to unwrap")
        exit(1)
    else:
        return x


# cmd: 1 (alloc)
## type:
## 1: hhd
## 2: hhu
## 3: hd
## 4: hu
## 5: d
## 6: u
## 7: ld
## 8: lu
## 9: f
## 10: lf
## 11: malloc()

# cmd: 2 (read)

# cmd: 3 ()
## idxを２つ(var0, var1)を入力して、対応するtypeの大きい方を使用する
### 1 <= type <= 10:
#### values[var0] = values[var1]
### type == 11
####


def main():
    io = connect()

    def alloc(idx: int, type_: int, value: bytes, len: int = 0):
        io.sendlineafter(b"> ", b"1")  # cmd
        io.sendlineafter(b"> ", str(idx).encode())  # idx
        io.sendlineafter(b"> ", str(type_).encode())  # type
        if 1 <= type_ <= 10:
            io.sendlineafter(b"> ", value)  # value
        elif type_ == 11:
            assert len > 0
            io.sendlineafter(b"> ", str(len).encode())  # len
            io.sendlineafter(b"> ", value)  # value
        return

    def read(idx: int):
        io.sendlineafter(b"> ", b"2")
        io.sendlineafter(b"> ", str(idx).encode())
        return io.recvuntil(b"\ncmd", drop=True)


    # io.sendlineafter("")

    io.interactive()
    return


if __name__ == "__main__":
    main()
